# -*- coding: utf-8 -*-
"""Yolo-fine-tuning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dxQmzRN08_QTX96m1MJb6E4xduDohqeZ
"""

!pip install pytesseract
!pip install easyocr

import easyocr
# EasyOCR reader'ı başlat
reader = easyocr.Reader(['en'])

import kagglehub

# Download latest version
path = kagglehub.dataset_download("sujaymann/car-number-plate-dataset-yolo-format")

print("Path to dataset files:", path)

import os

os.getcwd()

os.listdir('/root/.cache/kagglehub/datasets/sujaymann/car-number-plate-dataset-yolo-format/')

os.listdir('/root/.cache/kagglehub/datasets/sujaymann/car-number-plate-dataset-yolo-format/versions/')

os.listdir('/root/.cache/kagglehub/datasets/sujaymann/car-number-plate-dataset-yolo-format/versions/3')

os.listdir('/root/.cache/kagglehub/datasets/sujaymann/car-number-plate-dataset-yolo-format/versions/3/License-Plate-Data')

actual_path = '/root/.cache/kagglehub/datasets/sujaymann/car-number-plate-dataset-yolo-format/versions/3/License-Plate-Data'

!pip install ultralytics -q

import warnings

warnings.simplefilter('ignore')

import numpy as np
import cv2
import os
from ultralytics import YOLO
import matplotlib.pyplot as plt
from sklearn.utils import shuffle
from matplotlib.patches import Rectangle
import pandas as pd

yaml_path = actual_path + "/data.yaml"
train_path = actual_path + "/train"
test_path = actual_path + "/test"

print(yaml_path)
print(train_path)
print(test_path)
print(os.listdir(train_path + "/labels/"))

def read_file(file_path, file_name):
    data = []
    with open(file_path, 'r') as f:
        annotations = f.readlines()

    for annotation in annotations:
        parts = annotation.strip().split()
        if len(parts) == 5:  # YOLO formatında doğru satır sayısı (5)
            class_id, x_center, y_center, width, height = map(float, parts)
            data.append([file_name] + [class_id, x_center, y_center, width, height])

    return data

def create_data_frame(train_path):
    label_path = os.path.join(train_path, "labels")

    label_file_names = os.listdir(label_path)

    all_data = []

    for label_file in label_file_names:
        file_path = os.path.join(label_path, label_file)
        file_data = read_file(file_path, label_file)

        all_data.extend(file_data)

    columns = ['file_id', 'class_id', 'x_center', 'y_center', 'width', 'height']
    df = pd.DataFrame(all_data, columns=columns)

    return df

df = create_data_frame(train_path)
df.head()

boxes = {}
images = {}
number_of_images = 5

print(os.listdir('/root/.cache/kagglehub/datasets/sujaymann/car-number-plate-dataset-yolo-format/versions/3/License-Plate-Data/train/images/'))

if not df.empty:
    first_rows = df.iloc[0:number_of_images]
    for i in range(0, number_of_images):

      row = first_rows.iloc[i]  # Satırı al
      image_path = os.path.join(train_path, "images", row['file_id'].replace('.txt', '.png'))

      if os.path.exists(image_path):
          images[i] = cv2.imread(image_path)
          image_height, image_width = images[i].shape[:2]

          x_center = row['x_center'] * image_width
          y_center = row['y_center'] * image_height
          box_width = row['width'] * image_width
          box_height = row['height'] * image_height

          xmin = int(x_center - box_width / 2)
          xmax = int(x_center + box_width / 2)
          ymin = int(y_center - box_height / 2)
          ymax = int(y_center + box_height / 2)

          boxes[i] = [xmin, xmax, ymin, ymax]
      else:
          print(f"Resim bulunamadı: {image_path}")

for i in range(0, number_of_images):
  xmin, xmax, ymin, ymax = boxes[i][0], boxes[i][1], boxes[i][2], boxes[i][3]
  plt.figure(figsize=(8, 8))
  plt.title("Label Plate")
  plt.imshow(images[i])
  plt.gca().add_patch(plt.Rectangle((xmin, ymin), xmax-xmin, ymax-ymin, color='yellow', fill=False, linewidth=2))
  plt.show()

model = YOLO('yolo11n.pt')

import yaml
def yaml_creator():
    yaml_file_path = yaml_path

    data_dict = {
        'train': train_path,
        'val': test_path,
        'nc': 1,  # Sınıf sayısı
        'names': ['license_plate']  # Sınıf ismi
    }

    if os.path.exists(yaml_file_path):
        os.remove(yaml_file_path)
        print("Önceki dosya silindi!")

    with open(yaml_file_path, 'w') as yaml_file:
        yaml.dump(data_dict, yaml_file)

    print(f"YAML dosyası {yaml_file_path} oluşturuldu.")

def yaml_reader():
    yaml_file_path = yaml_path

    if os.path.exists(yaml_file_path):
        with open(yaml_file_path, 'r') as yaml_file:
            file_content = yaml_file.read()

            data = yaml.safe_load(file_content)

            print("YAML dosyası içeriği:")
            print(data)

            return data
    else:
        print(f"{yaml_file_path} dosyası bulunamadı.")
        return None

yaml_creator()
yaml_reader()

"""# Predictions before training"""

results = model.val(data=yaml_path)

print(results.results_dict)

# Predict on a new image
results = model.predict(test_path + '/images/*.png', imgsz=640)

import glob
image_folder = test_path + '/images'

image_files = glob.glob(os.path.join(image_folder, '*.png'))  # Tüm .png dosyalarını al

for image_path in image_files[0:number_of_images]:
    image = cv2.imread(image_path)

    results = model.predict(image_path)

    predictions = results[0].boxes  # İlk resmin kutuları

    for box in predictions:
        xmin, ymin, xmax, ymax = box.xyxy[0].cpu().numpy()
        confidence = box.conf[0].cpu().numpy()
        class_id = int(box.cls[0].cpu().numpy())

        cv2.rectangle(image, (int(xmin), int(ymin)), (int(xmax), int(ymax)), (0, 255, 0), 2)  # Yeşil kutu

    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    plt.imshow(image_rgb)
    plt.axis('off')
    plt.show()

results = model.train(
    data=yaml_path,         # Eğitim verisinin yolu
    epochs=50,              # Daha uzun eğitim için epoch sayısını artırıyoruz
    imgsz=640,              # Görüntü boyutu (genellikle standarttır, 640 iyi bir denge)
    batch=32,          # Uygun bir batch size, sistem kaynaklarına bağlı olarak artırılabilir
    lr0=0.0001,               # Orta seviye bir öğrenme oranı, deneyle optimize edilebilir
    optimizer='Adam',       # Adam optimizasyon algoritması yaygın olarak kullanılır
    weight_decay=0.0005,    # Küçük bir weight decay değeri overfitting’i önler
    augment=True,           # Veri artırmayı etkinleştir
    patience=5,             # Early stopping için patience, modelin gelişmediği 5 epoch'tan sonra durdurur
    save_period=5,          # Her 5 epoch'ta bir model kaydedilir
)

from ultralytics import YOLO

trained_model = YOLO("runs/detect/train/weights/best.pt")

results = trained_model.predict(test_path + '/images/*.png', imgsz=640)

import glob
from PIL import Image

image_folder = test_path + '/images'

image_files = glob.glob(os.path.join(image_folder, '*.png'))  # Tüm .png dosyalarını al

for image_path in image_files:
    image = cv2.imread(image_path)

    results = trained_model.predict(image_path, conf=0.5)

    plot = results[0].plot()
    plot = cv2.cvtColor(plot, cv2.COLOR_BGR2RGB)
    display(Image.fromarray(plot))

import easyocr
import glob
import cv2
from google.colab.patches import cv2_imshow
from PIL import Image

reader = easyocr.Reader(['en'])

for image_path in image_files[0:number_of_images]:
    image = cv2.imread(image_path)

    results = trained_model.predict(image_path)

    for result in results[0].boxes:
        x_min, y_min, x_max, y_max = map(int, result.xyxy[0])

        cropped_plate = image[y_min:y_max, x_min:x_max]

        plaka_yazi = reader.readtext(cropped_plate)

        plaka_metni = " ".join([text[1] for text in plaka_yazi])
        print(f"Plakada yazanlar:", plaka_metni)

        cv2_imshow(cropped_plate)
        cv2.waitKey(0)
        cv2.destroyAllWindows()

    plot = results[0].plot()
    plot = cv2.cvtColor(plot, cv2.COLOR_BGR2RGB)
    display(Image.fromarray(plot))

